<?xml version="1.0"?>
<launch>
	<!-- valid for summitxl - summitxl hl - summitxl hls -->
	<!-- The environment variables should be set in a file or .bashrc -->

	<arg name="id_robot" default="$(optenv ROBOT_ID summit_xl)"/>
	<arg name="xacro_robot_a" default="irlab_summit_xls_std.urdf.xacro"/>

	<!-- 2D LASERS -->
	<arg name="has_scanse_lasers" default="$(optenv ROBOT_HAS_SCANSE_LASERS true)"/>
	<arg name="has_lds_lasers" default="$(optenv ROBOT_HAS_LDS_LASERS true)"/>
	
	<!-- RGBD CAMERAS -->
	<arg name="has_front_rgbd_camera" default="$(optenv ROBOT_HAS_FRONT_RGBD_CAMERA false)"/>
	<arg name="front_rgbd_camera_node" default="front_rgbd_camera"/>
	<arg name="front_rgbd_camera_id" default="$(optenv ROBOT_FRONT_RGBD_CAMERA_ID #1)"/>

	<!-- Other devices -->
	<arg name="pad_model" default="$(optenv ROBOT_PAD_MODEL ps4)"/>

	<!-- Nav/Map Stack -->
	<arg name="teleop" default="false"/>
	<arg name="launch_robot_localization" default="false"/> <!-- TODO: to fix, currently not working due to bad imu data -->
	<arg name="omni" default="true"/> <!-- planner is set to plan diff drive trajectories TODO: get omni drive to work-->
	<arg name="launch_move_base" default="false"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="false"/>
	<arg name="map_file" default="icclab/icclab_latest_map.yaml"/>
	<arg name="x_init_pose" default="-16.910"/>
	<arg name="y_init_pose" default="-0.777"/>
	<arg name="z_init_pose" default="0.0"/>
	<arg name="a_init_pose" default="-1.597"/>
	<arg name="debug_mode" default="false"/> <!-- currently just shows voxel map if true -->
	<arg name="slam" default="false"/>

	<!-- Optional -->
	<arg name="launch_web_server" default="false"/>

	<group ns="$(arg id_robot)">

		<arg name="prefix" value="$(arg id_robot)_"/>

		<!-- start robot_state_publisher - publish fixed transforms, load robot model to param server -->
		<include file="$(find icclab_summit_xl)/launch/real/irlab_summit_xl_state_robot.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name ="robot_model" value ="$(arg xacro_robot_a)"/>
		</include>

		<!-- start summit_xl_pad nodes -->
		<include file="$(find summit_xl_bringup)/launch/summit_xl_pad.launch">
			<arg name="pad_model" value="$(arg pad_model)"/>
		</include>

		<!-- start robotnik_base_hw nodes -->
		<include file="$(find summit_xl_bringup)/launch/robotnik_base_hw.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- start summit_xl_control nodes -->
		<include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- if ekf_loc_odom node is launched base controller must not publish the odom -> base_footprint transform-->
		<param if="$(arg launch_robot_localization)" name="robotnik_base_control/odom_broadcast_tf" value="false"/>
		<param unless="$(arg omni)" name="robotnik_base_control/kinematic_mode" value="diff"/>

		<!-- start complementary_filter (imu filter) -->
		<!-- start px4 an open source flight control software -->
		<!-- start mavros node -->
		<include file="$(find summit_xl_bringup)/launch/pixhawk.launch"/>

		<!-- the  mavros node generates unconnected frames in tf -->
		<!-- with a crappy workaround we publish some dummy transforms -->
		<node pkg="tf" type="static_transform_publisher" name="fcu_static_trafo_pub" args="0 0 0 0 0 0 $(arg id_robot)_odom fcu 1000" />
		<node pkg="tf" type="static_transform_publisher" name="local_origin_static_trafo_pub" args="0 0 0 0 0 0 $(arg id_robot)_odom local_origin 1000" />

		<include file="$(find summit_xl_localization)/launch/rl_utils.launch"/>

		<!-- start summit_xl_web server -->
		<include if="$(arg launch_web_server)" file="$(find summit_xl_web)/launch/summit_xl_web.launch"/>

                <!-- start system monitor node-->
                <include file="$(find system_monitor)/launch/system_monitor.launch">
                </include>


		<!--================================== SENSOR BRINGUP ==================================-->
		<!-- start laser nodes -->
		<include if="$(eval has_scanse_lasers and launch_move_base)" file="$(find icclab_summit_xl)/launch/real/irlab_sweep2scan.launch"/>
		<include if="$(eval has_lds_lasers and launch_move_base)" file="$(find icclab_summit_xl)/launch/real/irlab_lds_lidar.launch"/>

		<!-- start rgbd camera node -->
		<include if="$(arg has_front_rgbd_camera)" file="$(find summit_xl_bringup)/launch/orbbec.launch">
			<arg name="camera" value="$(arg front_rgbd_camera_node)"/>
			<arg name="prefix" value="$(arg prefix)$(arg front_rgbd_camera_node)"/>
			<arg name="device_id" value="$(arg front_rgbd_camera_id)"/>
		</include>

                <!-- run realsense camera on arm -->
                <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
                  <arg name="camera" value="arm_camera"/>
                  <arg name="align_depth" value="true"/>
                  <arg name="fisheye_fps" value="6"/>
                  <arg name="depth_fps" value="6"/>
                  <arg name="infra1_fps" value="6"/>
                  <arg name="infra2_fps" value="6"/>
                  <arg name="color_fps" value="6"/>
                  <arg name="gyro_fps" value="6"/>
                  <arg name="accel_fps" value="6"/>
                </include>

		<node name="foo_throttler_front" type="throttle" pkg="topic_tools"
                        args="messages /summit_xl/front_rgbd_camera/depth/points 1 /summit_xl/front_rgbd_camera/depth/points_throttled" />

		<node name="foo_throttler_arm" type="throttle" pkg="topic_tools"
                        args="messages /summit_xl/arm_camera/depth_registered/points 1 /summit_xl/arm_camera/depth_registered/points_throttled" />

		<!--================================== NAV STACK ==================================-->
		<!-- teleop - manually control robot with keyboard -->
		<node if="$(arg teleop)" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/>

		<!-- convert front camera depth image to LaserScan for input to laserscan merger -->
		<include if="$(eval launch_amcl_and_mapserver or launch_gmapping)" file="$(find icclab_summit_xl)/launch/depthimage_to_laserscan.launch"/>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find icclab_summit_xl)/launch/move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="omni" value="$(arg omni)"/>
			<arg name="scan_topic_front" value="scan_front"/>
			<arg name="scan_topic_rear" value="scan_rear"/>
			<arg unless="$(arg launch_robot_localization)" name="odom_topic" value="robotnik_base_control/odom"/>
			<arg if="$(arg launch_robot_localization)"     name="odom_topic" value="odometry/filtered_odom"/>
			<arg name="debug_mode" value="$(arg debug_mode)"/>
			<arg name="slam" value="$(arg slam)"/>
		</include>

		<!-- merge laser scan topics to scan_combined for ACML or GMapping, delay launch by 5 seconds -->
		<include if="$(eval launch_amcl_and_mapserver or launch_gmapping)" file="$(find icclab_summit_xl)/launch/timed_laserscan_multi_merger.launch">
			<arg name="delay_time" value="5"/>
		</include>

		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find icclab_summit_xl)/launch/sim/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
		</include>
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find icclab_summit_xl)/launch/sim/amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg if="$(arg omni)" name="odom_model_type" value="omni"/>
			<arg unless="$(arg omni)" name="odom_model_type" value="diff"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<arg name="a_init_pose" value="$(arg a_init_pose)"/>
		</include>

		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find icclab_summit_xl)/launch/slam_gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- odom filtering (fuses imu and odometry) -->
		<include if="$(arg launch_robot_localization)" file="$(find summit_xl_localization)/launch/robot_localization_odom.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

	</group>

</launch>

